#include <iostream>
using namespace std;

void problem1(){
    // Започваме със създаването на променливата N. След това взимаме стойност за тази променлива
    // от юзера (променливата трябва да е цяло число).
    int N = 0;
    cout << "Enter the value of N: ";
    cin >> N;
    
    // Създаваме условна клауза, където проверяваме, дали даденото число, може да се дели без остатък
    // и на 7 и на 2. И спрямо резултата принтираме нужният отговор.
    if ((N % 7 == 0) && (N % 2 == 0)){
        cout << "The number " << N << " is divisible by both 7 and 2.";
    } else {
        cout << "The number " << N << " is not divisible by both 7 and 2.";
    }
}


void problem2(){
    // Създаваме променливи, които да записват, колко числа отговарят на условието.
    // И още три, които да запаметяват втората и третата цифра, на всяко число.
    // В последствие създадох и променлива, запазваща първата цифра, с цел по-голяма четимост на кода.
    int counter = 0;
    int thousands = 0;
    int hundreds = 0;
    int tens = 0;

    // След това правим един цикъл, който итерира през всички числа в масива
    // и проверява, дали втората и третата цифра са еднакви (като ползва цяло деление, за да ги извлече)
    // Ако са еднакви, броячът се увеличава с едно.
    // В примера, не е включено числото 9999, което обаче би трябвало да влиза в масива, по условие,
    // и затова има разлика с 1 м/ъ моето решение и примера.
    // Накрая се изпринтва броя на числата.
    for (int i = 1000; i < 10000; i ++){
        thousands = i / 1000;
        hundreds = (i - thousands * 1000) / 100;
        tens = ((i - thousands * 1000) - hundreds * 100) / 10;
        if (hundreds == tens){
            counter++;
        }
    }
    cout << "There are " << counter << " numbers that fulfill the requirements in the array." << endl;
}


void problem3(){
    // Започваме със създаването на едномерният масив.
    // И създаването на променлива и взимането на нейната стойност т юзера, определяща
    // дължината на масива. И променлива събираща произведението.
    int N = 0;
    cout << "Enter value for N: ";
    cin >> N;
    int arr[N];
    int result = 0;
    int arr_element = 0;

    // След това създаваме цикъл, който приема стойности от юзера, за отделните елементи.
    // И веднага ги проверявас, дали се делят на две без остатък. Ако ДА, първата резултатът, се приравнява
    // на първата такава стойност. А останалите след това, се умножават по времения резултат.
    // Накрая изпринтваме финалният резултат.
    for (int i = 0; i < N; i++){
        cout << "Enter value for the array: ";
        cin >> arr_element;
        if (arr_element % 2 == 0){
            if (result == 0){
                result = arr_element;
            } else {
                result *= arr_element;
            }
        }
    }
    cout << "The result is: " << result << endl;

}


void problem4(){
    // Започваме със създаването на променливи отговарящи за размерите на двумерния масив.
    // После взимаме тяхните стойности от юзера и създаваме самият масив и променлива, която
    // ще съдържа крайният резултат.
    int n = 0;
    int m = 0;
    int result = 0;
    cout << "Enter value for n: ";
    cin >> n;
    cout << "Enter value for m: ";
    cin >> m;
    int A[n][m];

    // Продължаваме с вложен цикъл, който изисква от юзера да въведе стойности за масива.
    // След въвеждането на стойността на всеки елемент, проверяваме, дали той е положително число
    // и дали се намира на колона с нечетен индекс. Ако да, резултатът приема стойността на първото
    // такова число, а след това всяко, отговарящо на условето число, се умножава по резултата.
    // Накрая принтираме крайният резултат.

    for (int row = 0; row < n; row++){
        for (int col = 0; col < m; col++){
            cout << "Enter value for array element ar coordinates: " << row << "/" << col << ": ";
            cin >> A[row][col];
            if ((A[row][col] > 0) && (col % 2 == 1)){
                if (result == 0){
                    result = A[row][col];
                } else {
                    result *= A[row][col];
                }
            }
        }
    }
    cout << "The multiplication result is: " << result << endl;


}

int main(){
    // Настоящият код, представлява отговор на изпит вариант номер 2.
    // С цел опростяване на кода (избягването на повтарящ се код), както и за да се избегне дублиране
    // на имената на променливите, съм отделил всяка задача като отделна функция.  
    // Чрез закоментирането на 3 от 4те извиквания на функциите, може да се тества всяка една задача по отделно.
    
    // problem1();
    // problem2();
    // problem3();
    problem4();

    return 0;
}